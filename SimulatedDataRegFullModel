
#### reading data 

#load("simulatedGaussianData.rda") ### vecz simulado (dado completo normal)
#vecz = datnorm
load("simulatedFullData.rda") ### vecz simulado (dado completo full sem cov)
vecz = datfull

dim(vecz)
J= nrow(vecz) ;I = ncol(vecz) ### 303 por 61

indout = c(2,8,28,37,44)

z = vecz[,-indout]   
Inew = I-length(indout)  ##  locations (estimation) 

lat<- info.sites4$lat[-indout] ; long<- info.sites4$long[-indout] ; 
x1<-info.sites4$type[-indout]
Plat<- (lat - median(lat))/diff(quantile(lat, c(0.25,0.75))) 
Plong<- (long - median(long))/diff(quantile(long, c(0.25,0.75))) 
Ptemp = (t(dt.temp4[-indout,])-median(t(dt.temp4[-indout,])))/diff(quantile(dt.temp4[-indout,], c(0.25,0.75))) 
Pws = (t(dt.ws4[-indout,])-median(t(dt.ws4[-indout,])))/diff(quantile(dt.ws4[-indout,], c(0.25,0.75))) 

lat.out<- info.sites4$lat[indout] ; long.out<- info.sites4$long[indout] ; 
x1.out = info.sites4$type[indout]
Plat.out<- (lat.out - median(lat.out))/diff(quantile(lat.out, c(0.25,0.75))) 
Plong.out<- (long.out - median(long.out))/diff(quantile(long.out, c(0.25,0.75))) 
Ptemp.out = (t(dt.temp4[indout,])-median(t(dt.temp4[indout,])))/diff(quantile(dt.temp4[indout,], c(0.25,0.75))) 
Pws.out = (t(dt.ws4[indout,])-median(t(dt.ws4[indout,])))/diff(quantile(dt.ws4[indout,], c(0.25,0.75))) 

## coordinates
coords<- cbind(lat,long)
### distance matrix
distS<- distf(coords)
median(distS)
max(distS)

### distance matrix
coords.out<- cbind(lat.out,long.out)
distS.tot<- as.matrix(distf(rbind(coords,coords.out)))

####################### here read functions

LogVeroLogLamb1reg = function(loglamb1,distanceS,phi,alpha,nu1,beta1,x1){ 
  I1 = length(loglamb1)
  lverolamb<- NULL
  Wlamb = nu1*exp(-distanceS/phi)  ## covariance matrix for lambda
  W.aux<- solve(Wlamb)
  mu.loglamb = -nu1/2*rep(1, I1)+x1%*%t(beta1)
  lverolamb =  t(loglamb1-mu.loglamb)%*%W.aux%*%(loglamb1-mu.loglamb)
  l.vero<-    -0.5*determinant(Wlamb,logarithm = TRUE)$modulus- 0.5*sum(lverolamb)  
  l.vero[[1]]
  
}
######### main code


#------------------------------------------------------------------------------

require(mvtnorm,MASS)

M = 20000
theta= matrix(0,M,9)  ## sig2, phi, alpha, nu, like, like2
d0.post<- matrix(NA, M, ncol=J)
d1.post<- matrix(NA, M, ncol=J)
d2.post<- matrix(NA, M, ncol=J)
d3.post<- matrix(NA, M, ncol=J)
d4.post<- matrix(NA, M, ncol=J)
lambda.post<- array(data=NA, c(M,Inew,J))
mu.post<- matrix(NA, M, ncol=J)
lambda1.post<- array(data=NA, c(M,Inew))
lambda2.post<- array(data=NA, c(M,J))
##dd.post<- array(data=NA, c(M,1,J)) #### MUDAR AQUI

ra = .05;  rnu1= .7; rnu2 = 0.5 ; ral=0.04 ; raa = .2; 
rs2=0.1 ; rt2=0.15

rlamb = c(0.02,0.02,0.02, 0.02) 
rlamb2 = rep(0.09,10) 

cont1 = 0; cont2=0;cont3=0; cont4=rep(0,4); cont3b = 0;  ## por alpha and phi
cont4b<- rep(0,10)



#------------------------------------------------------------------
### initial values
sig2k = mean(apply(z,1,var));  
tau2k= 0.0;   
#tau2k = 0.1*sig2k
nuk=0.15; ak = 0.5;alphak= 1
C1<- CauchyCov(distS, ak, alphak)


nu1k = 0.1
#nu1k = 0
loglamb1k = rep(0,Inew)
nu2k = 0.1
#nu2k = 0
mutk = rep(0,J)
loglamb2k = rep(0,J)

X.lamb1 = cbind(lat,long)
betak = matrix(0,1,dim(X.lamb1)[2])
beta.post = matrix(NA,M,dim(X.lamb1)[2])


loglambk = matrix(0,J,Inew)
for (i in 1:Inew){ for (j in 1:J){ loglambk[j,i] <- loglamb1k[i]+loglamb2k[j] }}



#-----------------------------------------------------------------
#### FFBS information
#### for theta.t
Ftt = NULL
for (j in 1:J){
  Ftt[[j]] = t(cbind(rep(1,Inew), Plat, Plong, Ptemp[j,],Pws[j,])) ##  n x r
}
R = dim(Ftt[[1]])[1]
Gt<- diag(R)  ### p+1 covariates    ### n x n 
C0<- 100*diag(R)
m0<- rep(0,R)
discount<- c(.99)
### for mu.t
#m1<- 0 ; C11<- 100 ; Ft1<- t(rep(1,Inew)); Gt1<- 1  
d2<- c(.99)  ## n x n
Ft1 = NULL
Ft1 = t( cbind(apply(Ptemp,1,mean),apply(Pws,1,mean))) ##  n x r
#Ft1 = t(cbind(rep(1,J))) ##  n x r
dd.post<- array(data=NA, c(M,dim(Ft1)[1],J))

R1 = dim(Ft1)[1]
Gt1<- diag(R1)  ### p+1 covariates    ### n x n 
C11<- 100*diag(R1)
m1<- rep(0,R1)
##################################################
In<-diag(1, Inew)  ## matriz diagonal de 1's

#*********************************** MCMC *****************************/
#********************* Non-Gaussian *****************************/
######### criandos regioes (blocos) para lambda
ind = 1:Inew
region3 = ind[which((coords[,1]< (52.5))&(coords[,2]< (-1.8)))] 
region2 = ind[which((coords[,1]>= (52.5))&(coords[,2]>= (-1.8)))] 
region1 = ind[which((coords[,1]>= (52.5))&(coords[,2]< (-1.8)))] 
region4 = ind[which((coords[,1]< (52.5))&(coords[,2]>= (-1.8)))]

indr = c(region1,region2,region3,region4)
n<-NULL
n[1] = length(region1) 
n[2] = length(region2) 
n[3] = length(region3) 
n[4] = length(region4) 
nr = c(0,cumsum(n))

indrt = 1:J
nt = c(rep(30,9),J-sum(rep(30,9)))
nrt = c(0,cumsum(nt))

epsk = z*0

lverok = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k)   ### d0k,d1k,d2k,d3k
lverok1 = LogVeroLogLamb1reg(loglamb1k,distS,ak,alphak,nu1k,betak,X.lamb1)
lverok2 = LogVeroLogLamb2(loglamb2k,nu2k,mutk)

a1k = 10
alpha1k = 0.5
sig2k = var(as.vector(z))

system.time(for (k in 1:M){
  
  Cc = CauchyCov(distS,ak,alphak)   
  Cinv = solve(Cc)
  
  ## FFBS for deltas (each time t)
  ### TROCAR AQUI O FATOR DE DESCONTO
  dt<- FFBS(z-epsk,Cc,discount[1],m0,C0,Ftt,Gt, loglamb1k,loglamb2k,sig2k,tau2k, In)$d  
  d0.post[k,]<- dt[1,1,1:J] ;   d1.post[k,]<- dt[2,1,1:J] ;   
  d2.post[k,]<- dt[3,1,1:J] ;   d3.post[k,]<- dt[4,1,1:J];
  d4.post[k,]<- dt[5,1,1:J]
  
#    Sinv = diag(as.vector(sqrt(exp(loglamb1k))))%*%Cinv%*%diag(as.vector(sqrt(exp(loglamb1k))))
 #   for (j in 1:J){ 
  #    mu = dt[1,1,j] +  dt[2,1,j]*Plat +  dt[3,1,j]*Plong +  dt[4,1,j]*Ptemp[j,]+  dt[5,1,j]*Pws[j,]
   #   aux = solve(exp(loglamb2k[j])*Sinv/sig2k+In/tau2k)
    #  epsk[j,] = mvrnorm(1,aux%*%(exp(loglamb2k[j])*Sinv/sig2k)%*%(z[j,]-mu),aux) 
    #}
  
  ### FFBS for mus (each time t)  - lambda_t
  V1<- nu2k*1
  z.lk<- matrix(loglamb2k + (nu2k/2),J,1)
  
  aux = FFBS.mu(z.lk, V1, d2[1], m1, C11, Ft1, Gt1)$d
  mu.post[k,] <- apply(aux[1:R1,1,1:J]*Ft1,2,sum)
  
  dd.post[k,,] = aux[,1,]
  
  d0k<- d0.post[k,] ; d1k<- d1.post[k,] ; d2k<- d2.post[k,]; d3k<-d3.post[k,]; d4k<-d4.post[k,]
  mutk<- mu.post[k,]
  
  loglamb1prop = rep(NA, Inew)
  ###################### generate lambda(s,t)
  for (j in 1:4){
    
    region = indr[(nr[j]+1):nr[j+1]]
    loglamb1prop = loglamb1k;
    loglamb1prop[region] = loglamb1k[region] + rlamb[j]*rnorm(length(region));
    
    lverok = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k)   ### d0k,d1k,d2k,d3k
    lverok1 = LogVeroLogLamb1reg(loglamb1k,distS,a1k,alpha1k,nu1k,betak,X.lamb1)
    lveroprop = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1prop,loglamb2k,tau2k);    ### d0k,d1k,d2k,d3k
    lveroprop1 = LogVeroLogLamb1reg(loglamb1prop,distS,a1k,alpha1k,nu1k,betak,X.lamb1)
    
    auxprop = lveroprop+lveroprop1 ;
    auxk = lverok+lverok1 ;
    ratio = auxprop-auxk; test = runif(1);
    
    if (ratio>log(test)) {
      loglamb1k[region] = loglamb1prop[region];
      lverok1 = lveroprop1; lverok = lveroprop;
      cont4[j]<- cont4[j]+1
    }
    
    lambda1.post[k,]<- exp(loglamb1k)   ## array
    
    
  }
  
  ##### covariates in lambda1
  
  y.lamb1 = loglamb1k+nu1k/2
  S.lamb1 = nu1k*exp(-distS/a1k)
  P.lamb1 = solve(S.lamb1)
  auxk = solve(t(X.lamb1)%*%P.lamb1%*%X.lamb1)
  bet.hat = auxk%*%t(X.lamb1)%*%P.lamb1%*%y.lamb1
  betak = rmvnorm(1,mean=bet.hat,sigma=auxk)
  
  loglamb2prop = rep(NA, J)
  ###################### generate lambda(s,t)
  for (j in 1:10){
    
    regiont = indrt[(nrt[j]+1):nrt[j+1]]
    loglamb2prop = loglamb2k;
    loglamb2prop[regiont] = loglamb2k[regiont] + rlamb2[j]*rnorm(length(regiont));
    
    lverok = LogVeroNGt(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k,regiont)   ### d0k,d1k,d2k,d3k
    lverok2 = LogVeroLogLamb2(loglamb2k[regiont],nu2k,mutk[regiont])
    lveroprop = LogVeroNGt(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2prop,tau2k,regiont);    ### d0k,d1k,d2k,d3k
    lveroprop2 = LogVeroLogLamb2(loglamb2prop[regiont],nu2k,mutk[regiont])
    
    auxprop = lveroprop+lveroprop2 ;
    auxk = lverok+lverok2 ;
    ratio = auxprop-auxk; test = runif(1);
    
    if (ratio>log(test)) {
      loglamb2k[regiont] = loglamb2prop[regiont];
      cont4b[j]<- cont4b[j]+1
    }
    
    lambda2.post[k,]<- exp(loglamb2k)   ## array
    
    
  }
  ### gibbs for sig2
  
  #  bk = 0
  #  Cinv = solve(CauchyCov(distS,ak,alphak))
  #  Sinv = diag(as.vector(sqrt(exp(loglamb1k))))%*%Cinv%*%diag(as.vector(sqrt(exp(loglamb1k))))
  #  for (j in 1:J){
  #    mu = dt[1,1,j] +  dt[2,1,j]*Plat +  dt[3,1,j]*Plong +  dt[4,1,j]*Ptemp[j,]+  dt[5,1,j]*Pws[j,]
  #    media = z[j,]-mu#-epsk[j,]
  #    bk = bk + t(media)%*%(exp(loglamb2k[j])*Sinv)%*%media
  #  }
  #  sig2k = 1/rgamma(1,(J*Inew)/2+1,bk/2)
  
  ### gibbs for tau2
  
 #   bk = 0
#    for (j in 1:J){bk = bk + t(epsk[j,])%*%epsk[j,]}
 #   tau2k = 1/rgamma(1,(J*Inew)/2+1,bk/2)
  
    tau2k = 0
  
  ### M-H for phi and alpha
  
  aprop = exp(log(ak)+ra*rnorm(1));
  alphaAux = log(alphak/(2-alphak))+ral*rnorm(1);
  alphaprop = 2*exp(alphaAux)/(1+exp(alphaAux));
  
  
  lverok = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k)
  lveroprop = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,aprop,alphaprop,loglamb1k,loglamb2k,tau2k)
  
  auxprop = lveroprop+log(dgamma(aprop,1, 2.3/median(distS))) + log(aprop)+ log(alphaprop*(2-alphaprop))    #
  auxk = lverok+log(dgamma(ak,1, 2.3/median(distS)))  + log(ak) +   log(alphak*(2-alphak))  ##
  
  ratio = auxprop-auxk;   test = runif(1);
  if (ratio>log(test)) {
    ak = aprop;
    alphak = alphaprop;
    lverok = lveroprop;
    cont2 = cont2 + 1;
  }
  
  ### Metropolis-Hastings for nu
  a1prop = exp(log(a1k)+raa*rnorm(1));
  nu1prop = exp(log(nu1k)+rnu1*rnorm(1));
  lverok1 = LogVeroLogLamb1reg(loglamb1k,distS,a1k,alpha1k,nu1k,betak,X.lamb1)
  lveroprop1 = LogVeroLogLamb1reg(loglamb1k,distS,a1prop, alpha1k, nu1prop,betak,X.lamb1)
  
  auxprop = lveroprop1+log(nu1prop)+  log(dgamma(nu1prop,1,5))+log(a1prop)+  log(dgamma(a1prop,1,5))    #log(dgig(nuprop, 0, 0.75,6))  #
  auxk = lverok1+log(nu1k)+   log(dgamma(nu1k,1,5)) +log(a1k)+   log(dgamma(a1k,1,5))
  ratio = auxprop-auxk;   test = runif(1);
  if (ratio>log(test)) {
    nu1k = nu1prop;
    a1k = a1prop;
    lverok1 = lveroprop1;
    cont3 = cont3 + 1;
  }
  
  ####### nu2
  
  nu2prop = exp(log(nu2k)+rnu2*rnorm(1));
  lverok2 = LogVeroLogLamb2(loglamb2k, nu2k,mutk)
  lveroprop2 = LogVeroLogLamb2(loglamb2k, nu2prop,mutk)
  
  auxprop = lveroprop2+log(nu2prop)+  log(dgamma(nu2prop,1,5))    #log(dgig(nuprop, 0, 0.75,6))  #
  auxk = lverok2+log(nu2k)+   log(dgamma(nu2k,1,5)) #;log(dgig(nuk, 0, 0.75,6)) #
  ratio = auxprop-auxk;   test = runif(1);
  if (ratio>log(test)) {
    nu2k = nu2prop;
    lverok2 = lveroprop2;
    cont3b = cont3b + 1;
  }
  
  beta.post[k,] = betak;
  theta[k,1]= sig2k;
  theta[k,2] = ak;
  theta[k,3] = alphak;
  theta[k,4] = nu1k;
  theta[k,5] = tau2k;
  theta[k,6] = lverok;
  theta[k,7] = lverok2;
  theta[k,8] = nu2k;
  theta[k,9] = a1k;
  
  print(k)
  
  
}) 


### aceitacao
cont1/M   ## sig2 tau2
cont2/M   #a e alpha
cont3b/M ### nu2
cont3/M ### nu1 e a1
cont4b/M ### lambda2
cont4/M ### lambda1



plot(theta[1:M,1],t="l",main=expression(sigma^2))
plot(theta[1:M,2],t="l",main=expression(a))
plot(theta[1:M,3],t="l",main=expression(alpha))
plot(theta[1:M,4],t="l",main=expression(nu[1]))
plot(theta[1:M,5],t="l",main=expression(tau^2))
plot(theta[1:M,8],t="l",main=expression(nu[2]))
plot(theta[1:M,9],t="l",main=expression(a[1]))
plot(beta.post[1:M,1],t="l",main=expression(beta[1]))
plot(beta.post[1:M,2],t="l",main=expression(beta[2]))
