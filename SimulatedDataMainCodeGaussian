####### loading data
load("simulatedFullData.rda") ### vecz simulado (dado completo full sem cov)
vecz = datfull

dim(vecz)
J= nrow(vecz) ;I = ncol(vecz) ### 303 por 61

indout = c(2,8,28,37,44)

z = vecz[,-indout]   
Inew = I-length(indout)  ##  locations (estimation) 

load("infosites4.rda") ### sites

lat<- info.sites4$lat[-indout] ; long<- info.sites4$long[-indout] ; 
x1<-info.sites4$type[-indout]
Plat<- (lat - median(lat))/diff(quantile(lat, c(0.25,0.75))) 
Plong<- (long - median(long))/diff(quantile(long, c(0.25,0.75))) 
Ptemp = (t(dt.temp4[-indout,])-median(t(dt.temp4[-indout,])))/diff(quantile(dt.temp4[-indout,], c(0.25,0.75))) 
Pws = (t(dt.ws4[-indout,])-median(t(dt.ws4[-indout,])))/diff(quantile(dt.ws4[-indout,], c(0.25,0.75))) 

lat.out<- info.sites4$lat[indout] ; long.out<- info.sites4$long[indout] ; 
x1.out = info.sites4$type[indout]
Plat.out<- (lat.out - median(lat.out))/diff(quantile(lat.out, c(0.25,0.75))) 
Plong.out<- (long.out - median(long.out))/diff(quantile(long.out, c(0.25,0.75))) 
Ptemp.out = (t(dt.temp4[indout,])-median(t(dt.temp4[indout,])))/diff(quantile(dt.temp4[indout,], c(0.25,0.75))) 
Pws.out = (t(dt.ws4[indout,])-median(t(dt.ws4[indout,])))/diff(quantile(dt.ws4[indout,], c(0.25,0.75))) 

## coordinates
coords<- cbind(lat,long)
### distance matrix
distS<- distf(coords)
median(distS)
max(distS)

### distance matrix
coords.out<- cbind(lat.out,long.out)
distS.tot<- as.matrix(distf(rbind(coords,coords.out)))



#------------------------------------------------------------------------------
#### for the simulated data we assume taus2=0 (no nugget effect), uncomment for general code

M = 10000
theta= matrix(0,M,9)  
d0.post<- matrix(NA, M, ncol=J)
d1.post<- matrix(NA, M, ncol=J)
d2.post<- matrix(NA, M, ncol=J)
d3.post<- matrix(NA, M, ncol=J)
d4.post<- matrix(NA, M, ncol=J)
lambda.post<- array(data=NA, c(M,Inew,J))
mu.post<- matrix(NA, M, ncol=J)
lambda1.post<- array(data=NA, c(M,Inew))
lambda2.post<- array(data=NA, c(M,J))
dd.post<- array(data=NA, c(M,3,J)) 

ra = .07;  rnu1= 1.0; rnu2 = 0.5 ; ral=0.03 ; raa = .1; 
rs2=0.1 ; rt2=0.08

cont1 = 0; cont2=0;cont3=0; cont4=rep(0,4); cont3b = 0;  
cont4b<- rep(0,10)



#------------------------------------------------------------------
### initial values
sig2k = mean(apply(z,1,var));  
#tau2k = 0.1*sig2k
tau2k = 0
nuk=0.15; ak = 0.5;alphak= 1
C1<- CauchyCov(distS, ak, alphak)


nu1k = 0.1
loglamb1k = rep(0,Inew)
nu2k = 0.1
mutk = rep(0,J)
loglamb2k = rep(0,J)

loglambk = matrix(NA,J,Inew)
for (i in 1:Inew){ for (j in 1:J){ loglambk[j,i] <- loglamb1k[i]+loglamb2k[j] }}



#-----------------------------------------------------------------
#### FFBS information
#### for theta.t
Ftt = NULL
for (j in 1:J){
  Ftt[[j]] = t(cbind(rep(1,Inew), Plat, Plong, Ptemp[j,],Pws[j,])) ##  n x r
}
R = dim(Ftt[[1]])[1]
Gt<- diag(R)  ### p+1 covariates    ### n x n 
C0<- 100*diag(R)
m0<- rep(0,R)
discount<- .95

In<-diag(1, Inew)  ## matriz diagonal de 1's


#*********************************** MCMC *****************************/

epsk = z*0

lverok = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k)   ### d0k,d1k,d2k,d3k

a1k = 10
alpha1k = 0.5
sig2k = var(as.vector(z))

system.time(for (k in 1:M){
  
  Cc = CauchyCov(distS,ak,alphak)   
  Cinv = solve(Cc)
  
  ## FFBS for deltas (each time t)
  dt<- FFBS(z-epsk,Cc,discount[1],m0,C0,Ftt,Gt, loglamb1k,loglamb2k,sig2k,tau2k, In)$d  
  d0.post[k,]<- dt[1,1,1:J] ;   d1.post[k,]<- dt[2,1,1:J] ;   
  d2.post[k,]<- dt[3,1,1:J] ;   d3.post[k,]<- dt[4,1,1:J];
  d4.post[k,]<- dt[5,1,1:J]
  
### uncomment for general model with nugget effect  
#  Sinv = Cinv
#  aux = solve(Sinv/sig2k+In/tau2k)
#  for (j in 1:J){ 
#    mu = dt[1,1,j] +  dt[2,1,j]*Plat +  dt[3,1,j]*Plong +  dt[4,1,j]*Ptemp[j,]+  dt[5,1,j]*Pws[j,]
#    epsk[j,] = mvrnorm(1,aux%*%(Sinv/sig2k)%*%(z[j,]-mu),aux) 
#  }
  
  ### FFBS for mus (each time t)  - lambda_t
  mu.post[k,] <- rep(0,J)
  mutk<- mu.post[k,]
  
  
### uncomment for general model with nugget effect  
  ### gibbs for tau2
#  bk = 0
#  for (j in 1:J){bk = bk + t(epsk[j,])%*%epsk[j,]}
#  tau2k = 1/rgamma(1,(J*Inew)/2+1,bk/2)
  
  ### gibbs for sig2
  
  bk = 0
  Cinv = solve(CauchyCov(distS,ak,alphak))
  for (j in 1:J){
    mu = dt[1,1,j] +  dt[2,1,j]*Plat +  dt[3,1,j]*Plong +  dt[4,1,j]*Ptemp[j,]+  dt[5,1,j]*Pws[j,]
    media = z[j,]-mu-epsk[j,]
    bk = bk + t(media)%*%Cinv%*%media
  }
  sig2k = 1/rgamma(1,(J*Inew)/2+1,bk/2)
  
  ### M-H for phi and alpha
  
  aprop = exp(log(ak)+ra*rnorm(1));
  alphaAux = log(alphak/(2-alphak))+ral*rnorm(1);
  alphaprop = 2*exp(alphaAux)/(1+exp(alphaAux));

  lverok = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,ak,alphak,loglamb1k,loglamb2k,tau2k)
  lveroprop = LogVeroNG(z-epsk,distS,Plat,Plong,Ptemp,Pws,d0k,d1k,d2k,d3k,d4k,sig2k,aprop,alphaprop,loglamb1k,loglamb2k,tau2k)
  
  auxprop = lveroprop+log(dgamma(aprop,1, 2.3/median(distS))) + log(aprop)+ log(alphaprop*(2-alphaprop))    #
  auxk = lverok+log(dgamma(ak,1, 2.3/median(distS)))  + log(ak) +   log(alphak*(2-alphak))  ##
  
  ratio = auxprop-auxk;   test = runif(1);
  if (ratio>log(test)) {
    ak = aprop;
    alphak = alphaprop;
    lverok = lveroprop;
    cont2 = cont2 + 1;
  }
  
  
  
  theta[k,1]= sig2k;
  theta[k,2] = ak;
  theta[k,3] = alphak;
  theta[k,4] = nu1k;
  theta[k,5] = tau2k;
  theta[k,6] = lverok;
  theta[k,7] = lverok2;
  theta[k,8] = nu2k;
  theta[k,9] = a1k;
  
  print(k)
  
  
}) 


### acceptance rate
cont1/M   ## sig2 tau2
cont2/M   #a e alpha
cont3b/M ### nu2
cont3/M ### nu1 e a1
cont4b/M ### lambda2
cont4/M ### lambda1


##### some plots
plot(theta[1:M,1],t="l",main=expression(sigma^2))
plot(theta[1:M,2],t="l",main=expression(a))
plot(theta[1:M,3],t="l",main=expression(alpha))
plot(theta[1:M,4],t="l",main=expression(nu[1]))
plot(theta[1:M,5],t="l",main=expression(tau^2))
plot(theta[1:M,8],t="l",main=expression(nu[2]))
plot(theta[1:M,9],t="l",main=expression(a[1]))

